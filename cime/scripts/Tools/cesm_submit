#!/usr/bin/env perl 

use strict;
use warnings;
use Data::Dumper;
use Getopt::Long;

my $toolsdir = "./Tools";
push(@INC, $toolsdir);
require ConfigCase;

my %config = ConfigCase->getAllResolved();
my $machine = $config{'MACH'};
my $machroot = $config{'CCSM_MACHDIR'};
my $compiler = $config{'COMPILER'};
my $mpilib = $config{'MPILIB'};
my $caseroot = $config{'CASEROOT'};
my $case = $config{'CASE'};
my $cimeroot = $config{'CIMEROOT'};
my $scriptsroot = $config{'SCRIPTSROOT'};
my $perl5lib = "$config{'CIMEROOT'}/utils/perl5lib";
push(@INC, $perl5lib);
require Batch::BatchUtils;
require Module::ModuleLoader;
my $lastjobid = undef;

sub usage {
    die <<'EOF';
OPTIONS
  -jobid [or -j]  Job id to hold on in queue
EOF
}
my %opts = ( );
GetOptions(
    "h|help"  => \$opts{'help'},
    "j|jobid=i" => \$opts{'jobid'},
    )  or usage();
usage() if $opts{'help'};

if (defined $opts{'jobid'}) {
    $lastjobid=$opts{'jobid'};
}

sub main
{

    # declare local variables

    my $time_sec1 = time;
    my $time_sec2 = time;
    my $time_diff = time;

	# Check the case only once..
	
    $time_sec1 = time;

	print "checking the case..\n";
	open(my $CHECKCASE, "-|", "./check_case");
	while(<$CHECKCASE>)
	{
		print "$_";
	}
    close $CHECKCASE;
    if($?)
    {
        print "check_case failed\n";
        exit(-1);
    }
	
    $time_sec2 = time;
    $time_diff = $time_sec2 - $time_sec1;
    print "\n CASE_SUBMIT___CHECK_CASE___WALL_SEC $time_diff \n\n";

    #----------------------
	
    $time_sec1 = time;

	my $moduleloader = new Module::ModuleLoader(machine => $config{'MACH'}, compiler => $config{'COMPILER'},
                                            mpilib => $config{'MPILIB'}, debug => $config{'DEBUG'},
                                            scriptsroot => $config{'SCRIPTSROOT'}, caseroot => $config{'CASEROOT'});
    $moduleloader->loadModules();
	
    $time_sec2 = time;
    $time_diff = $time_sec2 - $time_sec1;
    print "\n CASE_SUBMIT___LOAD_MODULES___WALL_SEC $time_diff \n\n";

    #----------------------
	
    $time_sec1 = time;

	#my $batchutils = new Batch::BatchUtils(machine => $machine, machroot => $machroot, caseconfig => \%config);
	my $batchutils = Batch::BatchUtilsFactory::getBatchUtils( case => $case, caseconfig => \%config, caseroot => $caseroot, 
                                            ccsmroot => $cimeroot, compiler => $compiler, machine => $machine, 
                                            machroot => $machroot, mpilib => $mpilib, scriptsroot => $scriptsroot );
	
	$batchutils->dependencyCheck("sta_ok");
	
    $time_sec2 = time;
    $time_diff = $time_sec2 - $time_sec1;
    print "\n CASE_SUBMIT___DEPENDENCY_CHECK___WALL_SEC $time_diff \n\n";
	
    #----------------------
	
   #$time_sec1 = time;

   #$batchutils->submitJobs("sta_ok",$lastjobid);

   #$time_sec2 = time;
   #$time_diff = $time_sec2 - $time_sec1;
   #print "\n CASE_SUBMIT___SUBMIT_JOB___WALL_SEC $time_diff \n\n";
   #print "\n CASE_SUBMIT___FINISHED_AT $time_sec2 \n\n";

}

main(@ARGV) unless caller();
